***2025-02-25 08:08:40.702340+00:00***: os.path.join(BASE_DIR, f'{id}')='qPCR_ozaki_modified2025-02-25/2025_02_25_16_21_33_5175e2ab-47c2-4b0d-bd60-f75ea2357e0e/iteration_3'***2025-02-25 08:08:40.702559+00:00***: *********************** 2025_02_25_16_21_33_5175e2ab-47c2-4b0d-bd60-f75ea2357e0e/iteration_3 *****************************2025-02-25 08:08:40.703077+00:00***: *********************************************************2025-02-25 08:08:46.530238+00:00***: obj-chan preprocess result:

{
    "labware": [
        {
            "name": "sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "PCR MIX, primer",
            "labware": {"id": 6, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 7, "name": "PCR_reaction_plate"}
        }
    ]
}

Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:08:46.531872+00:00***: obj-chan postprocess result:

{
    "labware": [
        {
            "name": "sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "PCR MIX, primer",
            "labware": {"id": 6, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 7, "name": "PCR_reaction_plate"}
        }
    ]
}

Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:08:46.532899+00:00***: Attempt 1 failed with error: Extra data: line 69 column 1 (char 1906)***2025-02-25 08:08:46.534216+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 341, in decode
    raise JSONDecodeError("Extra data", s, end)
json.decoder.JSONDecodeError: Extra data: line 69 column 1 (char 1906)
***2025-02-25 08:08:46.534638+00:00***: Retrying... (Attempt 1/10)***2025-02-25 08:08:54.048743+00:00***: obj-chan preprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "PCR MIX, primer",
            "labware": {"id": 2, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 3, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:08:54.050451+00:00***: obj-chan postprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "PCR MIX, primer",
            "labware": {"id": 2, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 3, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:08:54.051323+00:00***: Attempt 2 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-25 08:08:54.052087+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-25 08:08:54.052392+00:00***: Retrying... (Attempt 2/10)***2025-02-25 08:09:00.689299+00:00***: obj-chan preprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 3, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:00.690685+00:00***: obj-chan postprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 3, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template only PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:00.691452+00:00***: Attempt 3 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-25 08:09:00.692505+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-25 08:09:00.697057+00:00***: Retrying... (Attempt 3/10)***2025-02-25 08:09:08.767899+00:00***: obj-chan preprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR  plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 3, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template",
            "quantity": 86,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:08.772338+00:00***: obj-chan postprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 1, "name": "1.5_ml_tube"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR  plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 3, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template",
            "quantity": 86,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 2, "name": "tube_15ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:08.774062+00:00***: Attempt 4 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-25 08:09:08.775588+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-25 08:09:08.777458+00:00***: Retrying... (Attempt 4/10)***2025-02-25 08:09:17.458077+00:00***: obj-chan preprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 6, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 7, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:17.460668+00:00***: obj-chan postprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 1, "name": "tube_1.5ml"}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 10,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": 6, "name": "96_well_PCR_plate"}
        },
        {
            "name": "template",
            "quantity": 86,
            "unit": "μL",
            "init_content": "template",
            "labware": {"id": 5, "name": "tube_15ml"}
        },
        {
            "name": "template only water",
            "quantity": 4,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": 4, "name": "tube_0.2ml"}
        },
        {
            "name": "reaction plate",
            "quantity": 5,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": 7, "name": "PCR_reaction_plate"}
        }
    ]
}


Please note that the ID's used in the output above may not match the actual available labware list. They are only used for the purpose of illustrating the JSON output format.***2025-02-25 08:09:17.462804+00:00***: Attempt 5 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-25 08:09:17.465057+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-25 08:09:17.467351+00:00***: Retrying... (Attempt 5/10)***2025-02-25 08:09:22.704225+00:00***: obj-chan preprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "***2025-02-25 08:09:22.705402+00:00***: obj-chan postprocess result:
Here is the extracted information in JSON format:


{
    "labware": [
        {
            "name": "1 sample DNAs",
            "quantity": 300,
            "unit": "μL",
            "init_content": "sample DNAs",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "water",
            "quantity": 300,
            "unit": "μL",
            "init_content": "water",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "10 μM primer_F",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "10 μM primer_R",
            "quantity": 130,
            "unit": "μL",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "PCR MIX",
            "quantity": 2000,
            "unit": "μL",
            "init_content": "PCR MIX",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "96 well PCR plate",
            "quantity": 1,
            "unit": "plate",
            "init_content": "",
            "labware": {"id": "", "name": ""}
        },
        {
            "name": "template only PCR MIX",
            "quantity": 86,
            "unit": "μL",
            "***2025-02-25 08:09:22.705926+00:00***: Attempt 6 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-25 08:09:22.707157+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-25 08:09:22.708626+00:00***: Retrying... (Attempt 6/10)***2025-02-25 08:09:23.225871+00:00***: Attempt 7 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 18610 tokens. Please reduce the length of the messages.***2025-02-25 08:09:23.231589+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 18610 tokens. Please reduce the length of the messages.
***2025-02-25 08:09:23.232145+00:00***: Retrying... (Attempt 7/10)***2025-02-25 08:09:23.566081+00:00***: Attempt 8 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 20756 tokens. Please reduce the length of the messages.***2025-02-25 08:09:23.567398+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 20756 tokens. Please reduce the length of the messages.
***2025-02-25 08:09:23.568714+00:00***: Retrying... (Attempt 8/10)***2025-02-25 08:09:23.939004+00:00***: Attempt 9 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 22902 tokens. Please reduce the length of the messages.***2025-02-25 08:09:23.943420+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 22902 tokens. Please reduce the length of the messages.
***2025-02-25 08:09:23.944622+00:00***: Retrying... (Attempt 9/10)***2025-02-25 08:09:24.294352+00:00***: Attempt 10 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 25048 tokens. Please reduce the length of the messages.***2025-02-25 08:09:24.297802+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 25048 tokens. Please reduce the length of the messages.
***2025-02-25 08:09:24.298584+00:00***: Retrying... (Attempt 10/10)***2025-02-25 08:09:24.299088+00:00***: ******************************************************************************2025-02-25 08:09:24.299426+00:00***: Failed to extract object list after 10 attempts.***2025-02-25 08:09:24.299826+00:00***: ******************************************************************************2025-02-25 08:09:24.300255+00:00***: object_list_num: 0