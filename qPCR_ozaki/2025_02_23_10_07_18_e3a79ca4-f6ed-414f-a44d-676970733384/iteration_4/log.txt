***2025-02-23 02:00:53.072100+00:00***: os.path.join(BASE_DIR, f'{id}')='qPCR_ozaki/2025_02_23_10_07_18_e3a79ca4-f6ed-414f-a44d-676970733384/iteration_4'***2025-02-23 02:00:53.072519+00:00***: *********************** 2025_02_23_10_07_18_e3a79ca4-f6ed-414f-a44d-676970733384/iteration_4 *****************************2025-02-23 02:00:53.072826+00:00***: *********************************************************2025-02-23 02:00:59.092654+00:00***: obj-chan preprocess result:

{
    "labware": [
        {"name": "1.5 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "10 μM primer", "quantity": 260, "unit": "μL", "init_content": ""},
        {"name": "PCR MIX", "quantity": 4536, "unit": "μL", "init_content": ""},
        {"name": "15 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "water", "quantity": 600, "unit": "μL", "init_content": ""}
    ]
}


Explanation:
Based on the given instructions, we can identify the following labware used in the experiment:

1. "1.5 ml tube" - 1 tube is used
2. "96 well PCR plate" - 1 plate is used
3. "10 μM primer" - 260 μL of primer is used (10 μL x 13 primers x 2 duplicates)
4. "PCR MIX" - 4536 μL of PCR MIX is used (137.6 μL x 13 primers x 2 duplicates + 86 μL x 1 template + 4 μL x 1 template)
5. "15 ml tube" - 1 tube is used
6. "water" - 600 μL of water is used (300 μL sample DNA + 300 μL water)***2025-02-23 02:00:59.094670+00:00***: obj-chan postprocess result:

{
    "labware": [
        {"name": "1.5 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "10 μM primer", "quantity": 260, "unit": "μL", "init_content": ""},
        {"name": "PCR MIX", "quantity": 4536, "unit": "μL", "init_content": ""},
        {"name": "15 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "water", "quantity": 600, "unit": "μL", "init_content": ""}
    ]
}


Explanation:
Based on the given instructions, we can identify the following labware used in the experiment:

1. "1.5 ml tube" - 1 tube is used
2. "96 well PCR plate" - 1 plate is used
3. "10 μM primer" - 260 μL of primer is used (10 μL x 13 primers x 2 duplicates)
4. "PCR MIX" - 4536 μL of PCR MIX is used (137.6 μL x 13 primers x 2 duplicates + 86 μL x 1 template + 4 μL x 1 template)
5. "15 ml tube" - 1 tube is used
6. "water" - 600 μL of water is used (300 μL sample DNA + 300 μL water)***2025-02-23 02:00:59.095573+00:00***: Attempt 1 failed with error: Extra data: line 13 column 1 (char 530)***2025-02-23 02:00:59.097097+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 341, in decode
    raise JSONDecodeError("Extra data", s, end)
json.decoder.JSONDecodeError: Extra data: line 13 column 1 (char 530)
***2025-02-23 02:00:59.097984+00:00***: Retrying... (Attempt 1/10)***2025-02-23 02:01:08.629037+00:00***: obj-chan preprocess result:
Here's the correct JSON format for the labware used in the experiment:


{
    "labware": [
        {"name": "1.5 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "10 μM primer_F", "quantity": 390, "unit": "μL", "init_content": ""},
        {"name": "10 μM primer_R", "quantity": 390, "unit": "μL", "init_content": ""},
        {"name": "PCR MIX", "quantity": 2000, "unit": "μL", "init_content": ""},
        {"name": "15 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "water", "quantity": 300, "unit": "μL", "init_content": ""},
        {"name": "template PCR MIX", "quantity": 86, "unit": "μL", "init_content": ""},
        {"name": "water for template", "quantity": 4, "unit": "μL", "init_content": ""},
        {"name": "reaction plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "template DNA", "quantity": 5, "unit": "μL", "init_content": ""},
        {"name": "primer mixture", "quantity": 130, "unit": "μL", "init_content": ""}
    ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - A total of 390 μL of primer_F is used (10 μL x 13 primers x 3 duplicates).
4. "10 μM primer_R" - A total of 390 μL of primer_R is used (10 μL x 13 primers x 3 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 300 μL of water is used.
8. "template PCR MIX" - 86 μL of PCR MIX for templates is used.
9. "water for template" - 4 μL of water is used for templates.
10. "reaction plate" - 1 plate is used.
11. "template DNA" - 5 μL of template DNA is used.
12. "primer mixture" - 130 μL of primer mixture is used (10 μL x 13 primers x 3 duplicates + 4 μL x 13 primers x 3 duplicates).

Please note that the labware IDs and names are left blank and need to be filled in according to the available labware list.***2025-02-23 02:01:08.631936+00:00***: obj-chan postprocess result:
Here's the correct JSON format for the labware used in the experiment:


{
    "labware": [
        {"name": "1.5 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "10 μM primer_F", "quantity": 390, "unit": "μL", "init_content": ""},
        {"name": "10 μM primer_R", "quantity": 390, "unit": "μL", "init_content": ""},
        {"name": "PCR MIX", "quantity": 2000, "unit": "μL", "init_content": ""},
        {"name": "15 ml tube", "quantity": 1, "unit": "tube", "init_content": ""},
        {"name": "water", "quantity": 300, "unit": "μL", "init_content": ""},
        {"name": "template PCR MIX", "quantity": 86, "unit": "μL", "init_content": ""},
        {"name": "water for template", "quantity": 4, "unit": "μL", "init_content": ""},
        {"name": "reaction plate", "quantity": 1, "unit": "plate", "init_content": ""},
        {"name": "template DNA", "quantity": 5, "unit": "μL", "init_content": ""},
        {"name": "primer mixture", "quantity": 130, "unit": "μL", "init_content": ""}
    ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - A total of 390 μL of primer_F is used (10 μL x 13 primers x 3 duplicates).
4. "10 μM primer_R" - A total of 390 μL of primer_R is used (10 μL x 13 primers x 3 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 300 μL of water is used.
8. "template PCR MIX" - 86 μL of PCR MIX for templates is used.
9. "water for template" - 4 μL of water is used for templates.
10. "reaction plate" - 1 plate is used.
11. "template DNA" - 5 μL of template DNA is used.
12. "primer mixture" - 130 μL of primer mixture is used (10 μL x 13 primers x 3 duplicates + 4 μL x 13 primers x 3 duplicates).

Please note that the labware IDs and names are left blank and need to be filled in according to the available labware list.***2025-02-23 02:01:08.633646+00:00***: Attempt 2 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-23 02:01:08.635709+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-23 02:01:08.637673+00:00***: Retrying... (Attempt 2/10)***2025-02-23 02:01:16.207216+00:00***: obj-chan preprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 260,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 260,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "PCR_MIX"}
    },
    {
      "name": "15 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 6, "name": "15_ml_tube"}
    },
    {
      "name": "water",
      "quantity": 600,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "water"}
    }
  ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - 260 μL of primer_F is used (10 μL x 13 primers x 2 duplicates).
4. "10 μM primer_R" - 260 μL of primer_R is used (10 μL x 13 primers x 2 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 600 μL of water is used (300 μL sample DNA + 300 μL water).

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:16.209559+00:00***: obj-chan postprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 260,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 260,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "PCR_MIX"}
    },
    {
      "name": "15 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 6, "name": "15_ml_tube"}
    },
    {
      "name": "water",
      "quantity": 600,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "water"}
    }
  ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - 260 μL of primer_F is used (10 μL x 13 primers x 2 duplicates).
4. "10 μM primer_R" - 260 μL of primer_R is used (10 μL x 13 primers x 2 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 600 μL of water is used (300 μL sample DNA + 300 μL water).

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:16.211033+00:00***: Attempt 3 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-23 02:01:16.212740+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-23 02:01:16.215714+00:00***: Retrying... (Attempt 3/10)***2025-02-23 02:01:28.053002+00:00***: obj-chan preprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "PCR_MIX"}
    },
    {
      "name": "15 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 6, "name": "15_ml_tube"}
    },
    {
      "name": "water",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "water"}
    },
    {
      "name": "template PCR MIX",
      "quantity": 86,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 8, "name": "template_PCR_MIX"}
    },
    {
      "name": "water for template",
      "quantity": 4,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 9, "name": "water_for_template"}
    },
    {
      "name": "reaction plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 10, "name": "reaction_plate"}
    }
  ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - 130 μL of primer_F is used (10 μL x 13 primers x 2 duplicates).
4. "10 μM primer_R" - 130 μL of primer_R is used (10 μL x 13 primers x 2 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 300 μL of water is used.
8. "template PCR MIX" - 86 μL of PCR MIX for templates is used.
9. "water for template" - 4 μL of water is used for templates.
10. "reaction plate" - 1 plate is used.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:28.053929+00:00***: obj-chan postprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "PCR_MIX"}
    },
    {
      "name": "15 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 6, "name": "15_ml_tube"}
    },
    {
      "name": "water",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "water"}
    },
    {
      "name": "template PCR MIX",
      "quantity": 86,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 8, "name": "template_PCR_MIX"}
    },
    {
      "name": "water for template",
      "quantity": 4,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 9, "name": "water_for_template"}
    },
    {
      "name": "reaction plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 10, "name": "reaction_plate"}
    }
  ]
}


Explanation:
Based on the given input, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube" - 1 tube is used.
2. "96 well PCR plate" - 1 plate is used.
3. "10 μM primer_F" - 130 μL of primer_F is used (10 μL x 13 primers x 2 duplicates).
4. "10 μM primer_R" - 130 μL of primer_R is used (10 μL x 13 primers x 2 duplicates).
5. "PCR MIX" - 2000 μL of PCR MIX is used.
6. "15 ml tube" - 1 tube is used.
7. "water" - 300 μL of water is used.
8. "template PCR MIX" - 86 μL of PCR MIX for templates is used.
9. "water for template" - 4 μL of water is used for templates.
10. "reaction plate" - 1 plate is used.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:28.054488+00:00***: Attempt 4 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-23 02:01:28.055249+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-23 02:01:28.055815+00:00***: Retrying... (Attempt 4/10)***2025-02-23 02:01:37.120556+00:00***: obj-chan preprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "sample DNA",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "Sample_DNA"}
    },
    {
      "name": "water",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "water"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 6, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "PCR_MIX"}
    },
    {
      "name": "empty 96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 8, "name": "Empty_96_well_PCR_plate"}
    }
  ]
}


Explanation:
Based on the given experiment description, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube": 1 tube is used.
2. "96 well PCR plate": 1 plate is used.
3. "sample DNA": 300 μL of sample DNA is used.
4. "water": 300 μL of water is used.
5. "10 μM primer_F": 130 μL of primer_F is used.
6. "10 μM primer_R": 130 μL of primer_R is used.
7. "PCR MIX": 2000 μL of PCR MIX is used.
8. "empty 96 well PCR plate": 1 empty 96 well PCR plate is used for the final result.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:37.121324+00:00***: obj-chan postprocess result:
Here is the correct JSON format for the labware used in the experiment:


{
  "labware": [
    {
      "name": "1.5 ml tube",
      "quantity": 1,
      "unit": "tube",
      "init_content": "",
      "labware": {"id": 1, "name": "1.5_ml_tube"}
    },
    {
      "name": "96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 2, "name": "96_well_PCR_plate"}
    },
    {
      "name": "sample DNA",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 3, "name": "Sample_DNA"}
    },
    {
      "name": "water",
      "quantity": 300,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 4, "name": "water"}
    },
    {
      "name": "10 μM primer_F",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 5, "name": "10_uM_primer_F"}
    },
    {
      "name": "10 μM primer_R",
      "quantity": 130,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 6, "name": "10_uM_primer_R"}
    },
    {
      "name": "PCR MIX",
      "quantity": 2000,
      "unit": "μL",
      "init_content": "",
      "labware": {"id": 7, "name": "PCR_MIX"}
    },
    {
      "name": "empty 96 well PCR plate",
      "quantity": 1,
      "unit": "plate",
      "init_content": "",
      "labware": {"id": 8, "name": "Empty_96_well_PCR_plate"}
    }
  ]
}


Explanation:
Based on the given experiment description, the labware used in the experiment can be identified as follows:

1. "1.5 ml tube": 1 tube is used.
2. "96 well PCR plate": 1 plate is used.
3. "sample DNA": 300 μL of sample DNA is used.
4. "water": 300 μL of water is used.
5. "10 μM primer_F": 130 μL of primer_F is used.
6. "10 μM primer_R": 130 μL of primer_R is used.
7. "PCR MIX": 2000 μL of PCR MIX is used.
8. "empty 96 well PCR plate": 1 empty 96 well PCR plate is used for the final result.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:37.121871+00:00***: Attempt 5 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-23 02:01:37.122569+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-23 02:01:37.122921+00:00***: Retrying... (Attempt 5/10)***2025-02-23 02:01:47.855697+00:00***: obj-chan preprocess result:
The correct JSON format for the labware used in the experiment is as follows:


{
  "labware": [
    {"name": "sample DNAs", "quantity": 300, "unit": "μL", "init_content": "", "labware": {"id": 1, "name": "sample_DNAs"}},
    {"name": "water", "quantity": 300, "unit": "μL", "init_content": "", "labware": {"id": 2, "name": "water"}},
    {"name": "10 μM primer_F", "quantity": 130, "unit": "μL", "init_content": "", "labware": {"id": 3, "name": "10_uM_primer_F"}},
    {"name": "10 μM primer_R", "quantity": 130, "unit": "μL", "init_content": "", "labware": {"id": 4, "name": "10_uM_primer_R"}},
    {"name": "PCR MIX", "quantity": 2000, "unit": "μL", "init_content": "", "labware": {"id": 5, "name": "PCR_MIX"}},
    {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": "", "labware": {"id": 6, "name": "96_well_PCR_plate"}},
    {"name": "template PCR MIX", "quantity": 86, "unit": "μL", "init_content": "", "labware": {"id": 7, "name": "template_PCR_MIX"}},
    {"name": "water for template", "quantity": 4, "unit": "μL", "init_content": "", "labware": {"id": 8, "name": "water_for_template"}},
    {"name": "reaction plate", "quantity": 1, "unit": "plate", "init_content": "", "labware": {"id": 9, "name": "reaction_plate"}}
  ]
}


Explanation:
Based on the given experiment description, the labware used in the experiment can be identified as follows:

1. "sample DNAs": 300 μL of sample DNAs are used.
2. "water": 300 μL of water is used.
3. "10 μM primer_F": 130 μL of primer_F is used.
4. "10 μM primer_R": 130 μL of primer_R is used.
5. "PCR MIX": 2000 μL of PCR MIX is used.
6. "96 well PCR plate": 1 plate is used.
7. "template PCR MIX": 86 μL of template PCR MIX is used.
8. "water for template": 4 μL of water for template is used.
9. "reaction plate": 1 plate is used.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:47.857770+00:00***: obj-chan postprocess result:
The correct JSON format for the labware used in the experiment is as follows:


{
  "labware": [
    {"name": "sample DNAs", "quantity": 300, "unit": "μL", "init_content": "", "labware": {"id": 1, "name": "sample_DNAs"}},
    {"name": "water", "quantity": 300, "unit": "μL", "init_content": "", "labware": {"id": 2, "name": "water"}},
    {"name": "10 μM primer_F", "quantity": 130, "unit": "μL", "init_content": "", "labware": {"id": 3, "name": "10_uM_primer_F"}},
    {"name": "10 μM primer_R", "quantity": 130, "unit": "μL", "init_content": "", "labware": {"id": 4, "name": "10_uM_primer_R"}},
    {"name": "PCR MIX", "quantity": 2000, "unit": "μL", "init_content": "", "labware": {"id": 5, "name": "PCR_MIX"}},
    {"name": "96 well PCR plate", "quantity": 1, "unit": "plate", "init_content": "", "labware": {"id": 6, "name": "96_well_PCR_plate"}},
    {"name": "template PCR MIX", "quantity": 86, "unit": "μL", "init_content": "", "labware": {"id": 7, "name": "template_PCR_MIX"}},
    {"name": "water for template", "quantity": 4, "unit": "μL", "init_content": "", "labware": {"id": 8, "name": "water_for_template"}},
    {"name": "reaction plate", "quantity": 1, "unit": "plate", "init_content": "", "labware": {"id": 9, "name": "reaction_plate"}}
  ]
}


Explanation:
Based on the given experiment description, the labware used in the experiment can be identified as follows:

1. "sample DNAs": 300 μL of sample DNAs are used.
2. "water": 300 μL of water is used.
3. "10 μM primer_F": 130 μL of primer_F is used.
4. "10 μM primer_R": 130 μL of primer_R is used.
5. "PCR MIX": 2000 μL of PCR MIX is used.
6. "96 well PCR plate": 1 plate is used.
7. "template PCR MIX": 86 μL of template PCR MIX is used.
8. "water for template": 4 μL of water for template is used.
9. "reaction plate": 1 plate is used.

Please note that the labware IDs and names are based on the available labware list.***2025-02-23 02:01:47.858485+00:00***: Attempt 6 failed with error: Expecting value: line 1 column 1 (char 0)***2025-02-23 02:01:47.859945+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 252, in get_object_list
    results = _extract_results_from_gpt_response(answer, log_file_path)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 135, in _extract_results_from_gpt_response
    results = text_to_dict(result.replace('extracted_results:', '').replace('extracted_results_end:', '').strip())
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 134, in <lambda>
    text_to_dict = lambda x: json.loads(x.replace('\'', '\"'))
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 338, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.12/3.12.8/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py", line 356, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
***2025-02-23 02:01:47.860615+00:00***: Retrying... (Attempt 6/10)***2025-02-23 02:01:48.399652+00:00***: Attempt 7 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 18211 tokens. Please reduce the length of the messages.***2025-02-23 02:01:48.403933+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 18211 tokens. Please reduce the length of the messages.
***2025-02-23 02:01:48.406049+00:00***: Retrying... (Attempt 7/10)***2025-02-23 02:01:48.714317+00:00***: Attempt 8 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 20244 tokens. Please reduce the length of the messages.***2025-02-23 02:01:48.717717+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 20244 tokens. Please reduce the length of the messages.
***2025-02-23 02:01:48.718847+00:00***: Retrying... (Attempt 8/10)***2025-02-23 02:01:49.075440+00:00***: Attempt 9 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 22277 tokens. Please reduce the length of the messages.***2025-02-23 02:01:49.076857+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 22277 tokens. Please reduce the length of the messages.
***2025-02-23 02:01:49.077516+00:00***: Retrying... (Attempt 9/10)***2025-02-23 02:01:49.375542+00:00***: Attempt 10 failed with error: This model's maximum context length is 16385 tokens. However, your messages resulted in 24310 tokens. Please reduce the length of the messages.***2025-02-23 02:01:49.378085+00:00***: Traceback: Traceback (most recent call last):
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/functions.py", line 45, in get_object_list
    object_list, obj_chan_errors = obj_chan(
                                   ^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 265, in run
    res, errors = get_object_list(process_flow, constraints, messages, log_file_path=log_file_path)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/src/formationformatter/obj_chan/__init__.py", line 245, in get_object_list
    res = openai.ChatCompletion.create(
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/chat_completion.py", line 25, in create
    return super().create(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_resources/abstract/engine_api_resource.py", line 153, in create
    response, _, api_key = requestor.request(
                           ^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 298, in request
    resp, got_stream = self._interpret_response(result, stream)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 700, in _interpret_response
    self._interpret_response_line(
  File "/Users/yuyaarai/Documents/Humanics/Project/FormationFormatter/.venv/lib/python3.12/site-packages/openai/api_requestor.py", line 765, in _interpret_response_line
    raise self.handle_error_response(
openai.error.InvalidRequestError: This model's maximum context length is 16385 tokens. However, your messages resulted in 24310 tokens. Please reduce the length of the messages.
***2025-02-23 02:01:49.378788+00:00***: Retrying... (Attempt 10/10)***2025-02-23 02:01:49.379299+00:00***: ******************************************************************************2025-02-23 02:01:49.379729+00:00***: Failed to extract object list after 10 attempts.***2025-02-23 02:01:49.380264+00:00***: ******************************************************************************2025-02-23 02:01:49.380633+00:00***: object_list_num: 0